{"version":3,"sources":["component/index.js","App.js","serviceWorker.js","index.js"],"names":["insert","quill","start","end","cursorPositionFirst","getSelection","index","cursorPositionLast","length","insertText","setSelection","parse","editorContent","getContents","ops","forEach","block","attributes","bold","underline","replace","unshift","push","setContents","ssml_breaks","ssml_languages","ssml_dates","ssml_sayAs","CustomToolbarAmazon","props","id","value","platform","onChange","className","title","map","breakOption","key","size","plataform","language","say","date","CustomToolbarGoogle","Editor","quillRef","useRef","useState","setPlataform","modulesAmazon","toolbar","container","handlers","selectPlatform","console","log","element","document","querySelector","ssmlCheck","check","current","getEditor","getText","then","errors","style","border","borderBottom","JSON","stringify","insertSpeak","this","insertSayAsNumber","insertEmphasisStrong","insertDate","insertBreak","insertEmphasis","insertWhisperingAmazon","insertWhisperingGoogle","insertLanguage","insertParagraph","insertSayAs","insertSubstitute","insertBreath","insertPhoneme","modulesGoogle","newPlataform","ref","html","placeholder","modules","formats","App","width","display","justifyContent","alignItems","paddingTop","height","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2c871dcb.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport ReactQuill from \"react-quill\";\r\n//import \"react-quill/dist/quill.snow.css\";\r\nimport { IoIosVolumeHigh, IoIosVolumeLow, IoIosCalendar } from \"react-icons/io\";\r\nimport { BiParagraph, BiPencil, BiFont, BiCodeAlt } from \"react-icons/bi\";\r\n//import { FaPodcast } from \"react-icons/fa\"\r\nimport { FaRegComment } from \"react-icons/fa\";\r\nimport PropTypes from \"prop-types\";\r\nimport ssmlCheck from \"ssml-check\";\r\n\r\nfunction insert(quill, start, end) {\r\n  const cursorPositionFirst = quill.getSelection().index;\r\n  const cursorPositionLast =\r\n  cursorPositionFirst + quill.getSelection().length + start.length;\r\n  \r\n  quill.insertText(cursorPositionFirst, start);\r\n  quill.insertText(cursorPositionLast, end);\r\n  quill.setSelection(cursorPositionFirst + start.length);\r\n\r\n}\r\n\r\nfunction parse(quill) {\r\n  var editorContent = quill.getContents().ops;\r\n  // loop blocks, change in formatting causes new block\r\n  editorContent.forEach(function (block) {\r\n    // if formatting is bold emphasis text\r\n    if (block.attributes && block.attributes.bold) {\r\n      block.insert = '<emphasis level=\"strong\">' + block.insert + \"</emphasis>\";\r\n    }\r\n    // if formatting is underline emphasis text\r\n    if (block.attributes && block.attributes.underline) {\r\n      block.insert = '<emphasis level=\"strong\">' + block.insert + \"</emphasis>\";\r\n    }\r\n    // add breaks before linebreaks for better timing\r\n    block.insert = block.insert.replace(\r\n      /(?:\\r\\n|\\r|\\n)/g,\r\n      '<break strength=\"x-strong\"/>\\n'\r\n    );\r\n  });\r\n  // add <speak> text at the beginning\r\n  editorContent.unshift({ insert: \"<speak>\\n\" });\r\n  // add </speak> text at the end\r\n  editorContent.push({ insert: \"</speak>\" });\r\n  // update editor with parsed SSML text\r\n  quill.setContents(editorContent);\r\n}\r\n\r\nconst ssml_breaks = [\"weak\", \"strong\", \"x-strong\"];\r\nconst ssml_languages = [\r\n  \"en-US\",\r\n  \"en-GB\",\r\n  \"de-DE\",\r\n  \"es-ES\",\r\n  \"fr-FR\",\r\n  \"it-IT\",\r\n  \"nl-NL\",\r\n  \"ru-RU\",\r\n  \"tr-TR\",\r\n];\r\n\r\nconst ssml_dates = [\"mdy\", \"dmy\", \"ymd\", \"md\", \"dm\", \"ym\", \"my\", \"d\", \"m\", \"y\"];\r\nconst ssml_sayAs = [\r\n  \"spell-out\",\r\n  \"number\",\r\n  \"ordinal\",\r\n  \"digits\",\r\n  \"fraction\",\r\n  \"expletive\",\r\n];\r\n/*\r\n * Custom toolbar component including insertStar button and dropdowns\r\n */\r\n\r\nconst CustomToolbarAmazon = (props) => {\r\n  return (\r\n    <div id=\"toolbar\">\r\n      <select\r\n        value={props.platform}\r\n        onChange={()=>{}}\r\n        className=\"ql-selectPlatform ql-header\"\r\n      >\r\n        <option value=\"amazon\" className=\"ql-ssml_date\">\r\n          Amazon\r\n        </option>\r\n        <option value=\"google\" className=\"ql-ssml_date\">\r\n          Google\r\n        </option>\r\n      </select>\r\n      <button className=\"ql-insertSpeak\">\r\n        <FaRegComment title=\"Speak\"/>\r\n      </button>\r\n      <select className=\"ql-insertBreak ql-header\">\r\n        <option>Break</option>\r\n       <IoIosCalendar/>\r\n        {ssml_breaks.map((breakOption) => (\r\n          <option\r\n            key={breakOption}\r\n            value={breakOption}\r\n            className=\"ql-ssml_date\"\r\n          >\r\n            {breakOption}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"ql-insertEmphasis\">\r\n        <IoIosVolumeHigh size={30} title=\"Emphasis\"/>\r\n      </button>\r\n      {props.plataform === \"amazon\" ? (\r\n        <button className=\"ql-insertWhisperingAmazon\">\r\n          <IoIosVolumeLow size={30} title=\"Whispering\"/>\r\n        </button>\r\n      ) : (\r\n        <button className=\"ql-insertWhisperingGoogle\">\r\n          <IoIosVolumeLow size={30} title=\"Whispering\"/>\r\n        </button>\r\n      )}\r\n      <select className=\"ql-insertLanguage ql-header\">\r\n        <option>Languaje</option>\r\n        {ssml_languages.map((language) => (\r\n          <option key={language} value={language} className=\"ql-ssml_date\">\r\n            {language}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"ql-insertParagraph\">\r\n        <BiParagraph title=\"Paragraph\"/>\r\n      </button>\r\n      <select className=\"ql-insertSayAs ql-header\">\r\n        <option>Say as</option>\r\n        {ssml_sayAs.map((say) => (\r\n          <option key={say} value={say} className=\"ql-ssml_date\">\r\n            {say}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select className=\"ql-insertDate ql-header\">\r\n        <option>Date</option>\r\n        {ssml_dates.map((date) => (\r\n          <option key={date} value={date} className=\"ql-ssml_date\">\r\n            {date}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"ql-insertSubstitute\">\r\n        <BiPencil title=\"Substitute\"/>\r\n      </button>\r\n      <button className=\"ql-insertPhoneme\" >\r\n        <BiFont title=\"Phoneme\"/>\r\n      </button>\r\n      <button className=\"ql-parse\">\r\n        <BiCodeAlt title=\"Parse\"/>\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomToolbarGoogle = (props) => {\r\n  return (\r\n    <div id=\"toolbar\">\r\n      <select\r\n        value={props.plataform}\r\n        onChange={()=>{}}\r\n        className=\"ql-selectPlatform ql-header\"\r\n      >\r\n        <option value=\"amazon\" className=\"ql-ssml_date\">\r\n          Amazon\r\n        </option>\r\n        <option value=\"google\" className=\"ql-ssml_date\">\r\n          Google\r\n        </option>\r\n      </select>\r\n      <button className=\"ql-insertSpeak\">\r\n        <FaRegComment />\r\n      </button>\r\n      <select className=\"ql-insertBreak ql-header\">\r\n        <option>Break</option>\r\n        {ssml_breaks.map((breakOption) => (\r\n          <option\r\n            key={breakOption}\r\n            value={breakOption}\r\n            className=\"ql-ssml_date\"\r\n          >\r\n            {breakOption}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"ql-insertEmphasis\">\r\n        <IoIosVolumeHigh size={30}/>\r\n      </button>\r\n      <button className=\"ql-insertWhisperingGoogle\">\r\n        <IoIosVolumeLow size={30}/>\r\n      </button>\r\n      {/*<select className=\"ql-insertLanguage ql-header\">\r\n        {ssml_languages.map((language) => (\r\n          <option key={language} value={language} className=\"ql-ssml_date\">\r\n            {language}\r\n          </option>\r\n        ))}\r\n      </select>*/}\r\n      <button className=\"ql-insertParagraph\">\r\n        <BiParagraph title=\"Paragraph\"/>\r\n      </button>\r\n      <select className=\"ql-insertSayAs ql-header\">\r\n        <option>Say as</option>\r\n        {ssml_sayAs.map((say) => (\r\n          <option key={say} value={say} className=\"ql-ssml_date\">\r\n            {say}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <select className=\"ql-insertDate ql-header\">\r\n        <option>Date</option>\r\n        {ssml_dates.map((date) => (\r\n          <option key={date} value={date} className=\"ql-ssml_date\">\r\n            {date}\r\n          </option>\r\n        ))}\r\n      </select>\r\n      <button className=\"ql-insertSubstitute\">\r\n        <BiPencil title=\"Substitute\"/>\r\n      </button>\r\n      {/*<button className=\"ql-insertPhoneme\" >\r\n        <BiFont title=\"Phoneme\"/>\r\n      </button>*/}\r\n      <button className=\"ql-parse\">\r\n        <BiCodeAlt title=\"Parse\"/>\r\n      </button>\r\n      \r\n    </div>\r\n  );\r\n};\r\n/*\r\n * Editor component with custom toolbar and content containers\r\n */\r\nfunction Editor(props) {\r\n  //const [editorHtml, setEditorHtml] = useState(\"\");\r\n  const quillRef = useRef(null);\r\n  const [plataform, setPlataform] = useState(\"amazon\");\r\n\r\n  const handleChange = (html) => {\r\n    //setEditorHtml(html);\r\n    let element = document.querySelector(\".ql-container\");\r\n    let toolbar = document.querySelector(\"#toolbar\")\r\n    console.log(\"ref, vamooos\", `${quillRef.current.getEditor().getText()}`);\r\n    ssmlCheck\r\n      .check(`${quillRef.current.getEditor().getText()}`, {\r\n        platform: plataform,\r\n      })\r\n      .then((errors) => {\r\n        if (errors) {\r\n          element.style.border = \"1pt solid red\";\r\n          toolbar.style.borderBottom=\"1pt solid red\"\r\n          console.log(JSON.stringify({ errors }));\r\n        } else {\r\n          element.style.border = \"1pt solid #CCCCCC\";\r\n          toolbar.style.borderBottom=\"1pt solid #CCCCCC\"\r\n          console.log(\"SSML is clean\");\r\n        }\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const modulesAmazon = {\r\n    //toolbar: ssmlToolbarOptions,\r\n    //'modules/rich-voice-editor':true\r\n    toolbar: {\r\n      container: \"#toolbar\",\r\n      handlers: {\r\n        selectPlatform: function(value){\r\n          console.log('value',value)\r\n          setPlataform(value)\r\n          let element = document.querySelector(\".ql-container\");\r\n          let toolbar = document.querySelector(\"#toolbar\")\r\n          ssmlCheck\r\n          .check(`${quillRef.current.getEditor().getText()}`, {\r\n            platform: value,\r\n          })\r\n          .then((errors) => {\r\n            if (errors) {\r\n              element.style.border = \"1pt solid red\";\r\n              toolbar.style.borderBottom = \"1pt solid red\";\r\n              console.log(JSON.stringify({ errors }));\r\n            } else {\r\n              element.style.border = \"1pt solid #CCCCCC\";\r\n              toolbar.style.border = \"1pt solid #CCCCCC\";\r\n              console.log(\"SSML is clean\");\r\n            }\r\n          });\r\n        },\r\n        insertSpeak: function (props) {\r\n          console.log(props)\r\n          insert(this.quill, \"<speak>\", \"</speak>\");\r\n        },\r\n        insertSayAsNumber: function () {\r\n          insert(this.quill, '<say-as interpret-as=\"number\">', \"</say-as>\");\r\n        },\r\n        insertEmphasisStrong: function () {\r\n          insert(this.quill, '<emphasis level=\"strong\">', \"</emphasis>\");\r\n        },\r\n        insertDate: function (value) {\r\n          if(value!=='Date')\r\n          insert(\r\n            this.quill,\r\n            '<say-as interpret-as=\"date\" format=\"' + value + '\">',\r\n            \"</say-as>\"\r\n          );\r\n        },\r\n        insertBreak: function (value) {\r\n          if(value!=='Break')\r\n            insert(this.quill, '<break strength=\"' + value + '\"/>', \"\");\r\n        },\r\n        insertEmphasis: function () {\r\n          insert(this.quill, '<emphasis level=\"strong\">', \"</emphasis>\");\r\n        },\r\n        insertWhisperingAmazon: function () {\r\n          insert(\r\n            this.quill,\r\n            '<amazon:effect name=\"whispered\">',\r\n            \"</amazon:effect>\"\r\n          );\r\n        },\r\n        insertWhisperingGoogle: function () {\r\n          insert(this.quill, '<emphasis level=\"reduced\">', \"</emphasis>\");\r\n        },\r\n        insertLanguage: function (value) {\r\n          if(value!=='Languaje')\r\n            insert(this.quill, '<lang xml:lang=\"' + value + '\">', \"</lang>\");\r\n        },\r\n        insertParagraph: function () {\r\n          insert(this.quill, \"<p>\", \"</p>\");\r\n        },\r\n        insertSayAs: function (value) {\r\n          if(value!=='Say as')\r\n            insert(\r\n              this.quill,\r\n              '<say-as interpret-as=\"' + value + '\">',\r\n              \"</say-as>\"\r\n            );\r\n        },\r\n        insertSubstitute: function () {\r\n          insert(\r\n            this.quill,\r\n            '<sub alias=\"Enter Substitute Text Here\">',\r\n            \"</sub>\"\r\n          );\r\n        },\r\n        insertBreath: function () {\r\n          insert(this.quill, \"<amazon:auto-breaths>\", \"</amazon:auto-breaths>\");\r\n        },\r\n        insertPhoneme: function () {\r\n          insert(\r\n            this.quill,\r\n            '<phoneme alphabet=\"ipa\" ph=\"pɪˈkɑːn\">',\r\n            \"</phoneme>\"\r\n          );\r\n        },\r\n        parse: function () {\r\n          parse(this.quill);\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  const modulesGoogle = {\r\n    //toolbar: ssmlToolbarOptions,\r\n    //'modules/rich-voice-editor':true\r\n    toolbar: {\r\n      container: \"#toolbar\",\r\n      handlers: {\r\n        selectPlatform: function(value){\r\n          console.log('value',value)\r\n          setPlataform(value)\r\n          let element = document.querySelector(\".ql-container\");\r\n          let toolbar = document.querySelector(\"#toolbar\")\r\n\r\n          ssmlCheck\r\n          .check(`${quillRef.current.getEditor().getText()}`, {\r\n            platform: value,\r\n          })\r\n          .then((errors) => {\r\n            if (errors) {\r\n              element.style.border = \"1pt solid red\";\r\n              toolbar.style.borderBottom = \"1pt solid red\";\r\n              console.log(JSON.stringify({ errors }));\r\n            } else {\r\n              element.style.border = \"1pt solid #CCCCCC\";\r\n              toolbar.style.border = \"1pt solid #CCCCCC\";\r\n              console.log(\"SSML is clean\");\r\n            }\r\n          });\r\n        },\r\n        insertSpeak: function () {\r\n          console.log(this.props)\r\n          insert(this.quill, \"<speak>\", \"</speak>\");\r\n        },\r\n        insertSayAsNumber: function () {\r\n          insert(this.quill, '<say-as interpret-as=\"number\">', \"</say-as>\");\r\n        },\r\n        insertEmphasisStrong: function () {\r\n          insert(this.quill, '<emphasis level=\"strong\">', \"</emphasis>\");\r\n        },\r\n        insertDate: function (value) {\r\n          if(value!=='Date')\r\n          insert(\r\n            this.quill,\r\n            '<say-as interpret-as=\"date\" format=\"' + value + '\">',\r\n            \"</say-as>\"\r\n          );\r\n        },\r\n        insertBreak: function (value) {\r\n          if(value!=='Break')\r\n          insert(this.quill, '<break strength=\"' + value + '\"/>', \"\");\r\n        },\r\n        insertEmphasis: function () {\r\n          insert(this.quill, '<emphasis level=\"strong\">', \"</emphasis>\");\r\n        },\r\n        insertWhisperingAmazon: function () {\r\n          insert(\r\n            this.quill,\r\n            '<amazon:effect name=\"whispered\">',\r\n            \"</amazon:effect>\"\r\n          );\r\n        },\r\n        insertWhisperingGoogle: function () {\r\n          insert(this.quill, '<emphasis level=\"reduced\">', \"</emphasis>\");\r\n        },\r\n        /*insertLanguage: function (value) {\r\n          if(value!=='Languaje')\r\n            insert(this.quill, '<lang xml:lang=\"' + value + '\">', \"</lang>\");\r\n        },*/\r\n        insertParagraph: function () {\r\n          insert(this.quill, \"<p>\", \"</p>\");\r\n        },\r\n        insertSayAs: function (value) {\r\n          if(value!=='Say as')\r\n            insert(\r\n              this.quill,\r\n              '<say-as interpret-as=\"' + value + '\">',\r\n              \"</say-as>\"\r\n            );\r\n        },\r\n        insertSubstitute: function () {\r\n          insert(\r\n            this.quill,\r\n            '<sub alias=\"Enter Substitute Text Here\">',\r\n            \"</sub>\"\r\n          );\r\n        },\r\n        insertBreath: function () {\r\n          insert(this.quill, \"<amazon:auto-breaths>\", \"</amazon:auto-breaths>\");\r\n        },\r\n        /*insertPhoneme: function () {\r\n          insert(\r\n            this.quill,\r\n            '<phoneme alphabet=\"ipa\" ph=\"pɪˈkɑːn\">',\r\n            \"</phoneme>\"\r\n          );\r\n        },*/\r\n        parse: function () {\r\n          parse(this.quill);\r\n        },\r\n      },\r\n    },\r\n  }; \r\n\r\n\r\n  return (\r\n    <div className=\"text-editor\">\r\n      {plataform === \"amazon\" ? (\r\n        <CustomToolbarAmazon\r\n          plataform={plataform}\r\n          setPlataform={(newPlataform) => setPlataform(newPlataform)}\r\n        />\r\n      ) : (\r\n        <CustomToolbarGoogle\r\n          plataform={plataform}\r\n          setPlataform={(newPlataform) => setPlataform(newPlataform)}\r\n        />\r\n      )}\r\n      <ReactQuill\r\n        ref={quillRef}\r\n        //value={editorHtml}\r\n        onChange={handleChange}\r\n        placeholder={props.placeholder}\r\n        modules={plataform === \"amazon\"?modulesAmazon:modulesGoogle}\r\n        id=\"editor\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n/*\r\n * Quill modules to attach to editor\r\n * See http://quilljs.com/docs/modules/ for complete options\r\n */\r\n\r\n/*\r\n * Quill editor formats\r\n * See http://quilljs.com/docs/formats/\r\n */\r\nEditor.formats = [\r\n  \"header\",\r\n  \"font\",\r\n  \"size\",\r\n  \"bold\",\r\n  \"italic\",\r\n  \"underline\",\r\n  \"strike\",\r\n  \"blockquote\",\r\n  \"list\",\r\n  \"bullet\",\r\n  \"indent\",\r\n  \"link\",\r\n  \"image\",\r\n  \"color\",\r\n];\r\n\r\n/*\r\n * PropType validation\r\n */\r\n\r\nEditor.propTypes = {\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Editor from './component'\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div style={{width:\"100%\", display:\"flex\", justifyContent:\"center\", alignItems:\"center\", paddingTop:100}}>\r\n      <div style={{width:\"50%\", height:\"500px\", }}>\r\n        <Editor placeholder=\"<speak>Your text here</speak>\"/>\r\n      </div>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}